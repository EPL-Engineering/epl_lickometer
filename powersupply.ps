%!PS-Adobe-3.0
%%Creator: gEDA gschem 1.8.1-20121123-13-g875406c
%%CreationDate: Wed Nov  8 11:39:06 2017
%%Title: /home/fosse/Documents/work/licksense/powersupply.sch
%%Author: fosse
%%BoundingBox: 0 0 612 792
%%Orientation: Landscape
%%Pages: 1
%%EndComments
%%BeginProlog
% Prolog for gEDA, define all the functions needed for rendering
% schematics on Postscript devices


% Draw a line from the second coordinate to the first
% x2 y2 x1 y1 width line -
/line {
    setlinewidth
    % pop off first element and moveto
    moveto
    % pop off remaining elements and draw a line segment
    lineto
    % draw it
    stroke
} bind def


% Draw a dot
% x y r dot -
/dot {
    0 360 arc fill
} bind def

% Draw a dot-dashed line, a bunch of lined segments,
% if the array element only has length two, draw a dot.
% [ [x2 y2 x1 y1] [x4 y4 x3 y3] [x5 y5] ... ] width dashed -
/width 0 def
/dashed {
    dup 2.0 div /width exch def
    setlinewidth
    % pop off each line segment and draw it as a dot or as a line
    {
	aload length 2 gt
	{ moveto lineto stroke}
	{ width dot } ifelse
    } forall
} bind def

% Draw an arc segment
% x y r ang1 ang2 width darc -
/darc {
    setlinewidth
    arc stroke
} bind def

% Draw a series of arc segment bits, if the array element only has a single
% element in it, draw a dot.
% [ [sa1 ea1] [sa2 ea2] ... ] x y r width dashedarc -
/x 0 def
/y 0 def
/dashedarc {
    dup /width exch def
    setlinewidth
    /r exch def  
    /y exch def
    /x exch def
    { aload length 1 gt
	{
	    % this element had two angles in it
	    % extract start and stop angles
	    x y r   % drop x y and r onto stack
		    % at this point we have: sa ea x y r
		    % we need                      x y r sa ea
		    % so..
	    5 -2 roll
	    % and add it to the current path, and draw it
	    arc stroke
	} {
	    % this element only had one angle in it, place a
	    % filled dot at the appropriate place
	    % compute center point of the arc using the angle
	    % that is on the top of the stack
	    dup   		% angle angle
	    cos r mul x add 	% angle x
	    exch		% x angle
	    sin r mul y add	% x y
	    width		% x y width/2
	    dot			% draw the dot
	} ifelse
    } forall

    % Now draw it
    stroke
} bind def

% Draw a box
% width height x y linethickness box -
/box {
    setlinewidth
    moveto
    exch dup 0 rlineto	 % w h, h w w 0      -- Draw bottom line
    exch 0 exch rlineto	 % h w, w h 0, w 0 h -- Draw right line 
    neg 0 rlineto	 % w, -w 0           -- Draw Top line
    closepath		 % finish and draw it
    stroke
} bind def			     

% Draw a filled box
% width height x y fbox -
/fbox {
    moveto
    exch dup 0 rlineto	
    exch 0 exch rlineto	
    neg 0 rlineto		
    closepath			
    fill			
} bind def

% Font reincoding utilities

% ISOLatin1Encoding, extended with remaining uncoded glyphs
/ISOLatin1Extended [
    /.notdef /Lslash /lslash /OE /oe /Scaron /scaron /Zcaron /zcaron
    /Ydieresis /trademark /bullet /dagger /daggerdbl /ellipsis /emdash
    /endash /fi /fl /florin /fraction /guilsinglleft /guilsinglright
    /perthousand /quotedblbase /quotedblleft /quotedblright
    /quotesinglbase /quotesingle /.notdef /.notdef /.notdef /space
    /exclam /quotedbl /numbersign /dollar /percent /ampersand
    /quoteright /parenleft /parenright /asterisk /plus /comma /minus
    /period /slash /zero /one /two /three /four /five /six /seven /eight
    /nine /colon /semicolon /less /equal /greater /question /at /A /B /C
    /D /E /F /G /H /I /J /K /L /M /N /O /P /Q /R /S /T /U /V /W /X /Y /Z
    /bracketleft /backslash /bracketright /asciicircum /underscore
    /quoteleft /a /b /c /d /e /f /g /h /i /j /k /l /m /n /o /p /q /r /s
    /t /u /v /w /x /y /z /braceleft /bar /braceright /asciitilde
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef
    /.notdef /.notdef /.notdef /dotlessi /grave /acute /circumflex
    /tilde /macron /breve /dotaccent /dieresis /.notdef /ring /cedilla
    /.notdef /hungarumlaut /ogonek /caron /space /exclamdown /cent
    /sterling /currency /yen /brokenbar /section /dieresis /copyright
    /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron
    /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph
    /periodcentered /cedilla /onesuperior /ordmasculine /guillemotright
    /onequarter /onehalf /threequarters /questiondown /Agrave /Aacute
    /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla /Egrave /Eacute
    /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis /Eth
    /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply
    /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn
    /germandbls /agrave /aacute /acircumflex /atilde /adieresis /aring
    /ae /ccedilla /egrave /eacute /ecircumflex /edieresis /igrave
    /iacute /icircumflex /idieresis /eth /ntilde /ograve /oacute
    /ocircumflex /otilde /odieresis /divide /oslash /ugrave /uacute
    /ucircumflex /udieresis /yacute /thorn /ydieresis
] def

% `new-font-name' `encoding-vector' `old-font-name' RE -
/RE {
    findfont
    dup maxlength dict begin {
        1 index /FID ne { def } { pop pop } ifelse
    } forall
    /Encoding exch def
    dup /FontName exch def
    currentdict end definefont pop
} bind def

% Text handling functions, select the font and scale it, then we need
% only to apply the appropriate transformations to get the text
% justified into the right spots.  The bad thing here is that we don't
% do any kerning, so the output may look a bit strange.

% compute the height of one character and return lly and ury
% (char) charheight lly ury
/charheight {
    gsave			% push graphics state
	newpath			% clear current path
	0 0 moveto		% Set current point
	false charpath		% get path
	flattenpath		% flatten path
	pathbbox		% stack = llx lly urx ury
	exch pop		% stack = llx lly ury
	3 -1 roll pop		% stack = lly ury
    grestore			% pop graphics state
} bind def

% compute the height of a string, one character at a time
% (string) stringheight lly ury
/lly 0.0 def
/ury 0.0 def

/stringheight {
    /lly 0.0 def			% initial value of heightmin
    /ury 0.0 def			% initial value of heightmax
    {				% work through string
	( ) dup 0 4 -1 roll put	% create one character string
	charheight		% measure it's height
	dup ury gt {		% if ury gt heightmax
	    /ury exch def	% update with new value
	} {
	    pop			% else discard ury
	} ifelse
	dup lly lt {		% if lly lt heightmin
	    /lly exch def	% update with new value
	} {
	    pop			% else discard lly
	} ifelse
    } forall
    lly ury			% Return the results
} bind def

% calculate the string width taking into account the escapes.
/mystrx 0.0 def
/mystry 0.0 def
/mystresc false def

/mystringwidth {
    /mystrx 0.0 def
    /mystry 0.0 def
    /mystresc false def
    {				% work through string
	% did we process the escape character last?
	mystresc {
	    % last character was escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
		% toggle drawing overbars
		0.0 0.0 % make it like it never happened...
	    } {
		% otherwise measure the character 
		(\\ ) dup 1 4 -1 roll put % count a \ and the character
		stringwidth
	    } ifelse
	    % and reset the flag
	    /mystresc false def
	} {
	    % last character was not escape
	    % is this escape
	    dup 92 eq {
		% yes, escape character, set flag
		/mystresc true def
		pop % drop character
		0.0 0.0 % make like this character has no width and height
	    } {
		( ) dup 0 4 -1 roll put	% create one character string
		stringwidth		% measure it's height/width
	    } ifelse
	} ifelse
	% accumulate x and y movements
	mystry add /mystry exch def
	mystrx add /mystrx exch def
    } forall
    mystrx mystry % drop results on stack
} bind def

% Render a string with overbars
%
/escaped false def
/drawoverbar false def
/fontsize 0.0 def

%string1 string2 append -
/append {
    2 copy length exch length add % find new length
    string dup % string1 string2 string string
    4 2 roll % string string string1 string2
    2 index 0 3 index
    % string string string1 string2 string 0 string1
    putinterval % string string string1 string2
    exch length exch putinterval
} bind def

% If drawoverbar is set, draw a line of the same length as the given string
% string overbarshowline -
/overbarshowline {
    % print overbar if necessary
    stringwidth pop 0
    drawoverbar {
        rlineto
        gsave stroke grestore
    } {
        rmoveto
    } ifelse
} bind def

% Draws overbars for the given string, then shows the string itself
% string overbarshow
/overbarshow {
    /overbarshowacc () def
    /overbarshowtxt () def

    gsave
    fontsize 10.0 div setlinewidth
    0 fontsize rmoveto  % move to (0,overbarheight)

    {				% work through string
	escaped {
	    % the last character was the escape
	    % handle the escape
	    % is it an _ = 95?
	    dup 95 eq {
		pop  % we don't need the character anymore
                overbarshowacc overbarshowline
                % toggle drawing overbars
		/drawoverbar drawoverbar not def

                % Append the contents off the accumulator to the text
                % string we're eventually going to show
                /overbarshowtxt overbarshowtxt overbarshowacc append def

                % clear accumulator
                /overbarshowacc () def
	    } {
                % add to accumulator
                (\\ ) dup 1 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	    % and reset the flag
	    /escaped false def
	} {
	    % check for escape character \ = 92
	    dup 92 eq {
		% yes, escape character, set flag
		/escaped true def
		pop % drop character
	    } {
                % add to accumulator
                ( ) dup 0 4 -1 roll put
                overbarshowacc exch append
                /overbarshowacc exch def
	    } ifelse
	} ifelse
    } forall
    % Catch any leftovers
    overbarshowacc overbarshowline
    overbarshowtxt overbarshowacc append

    grestore
    show
} bind def

% 
% hcenter rjustify vcenter vjustify spacing [(line1) (line2) ... ] rot x y size text -
/stringw 0.0 def
/stringh 0.0 def
/spacing 0.0 def
/strings [ ] def
/stringtxt ( ) def
/stringcount 0 def
/rot 0.0 def

/text {
    gsave	        % save state for later
    /drawoverbar false def      % start by not drawing overbars

    dup /fontsize exch def  % save font size for corrections later
    % do font selection 
    /gEDAFont findfont
    exch scalefont
    setfont

    % set up coordinates
    translate           % move origin to given point
    rotate		% rotate so that text is drawn
    0 0 moveto
    dup length /stringcount exch def			% Get number of strings
    /strings exch def     				% save strings
    /spacing exch def
    % do we have more than 1 string to render?
    stringcount 1 eq {
	/stringtxt strings aload pop def		% get the string 
	/stringw stringtxt mystringwidth pop neg def	% get the -width
	/stringh stringtxt stringheight exch pop neg def% get the -height

	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh rmoveto } if 
	% vertical center
	{ 0 stringh 0.3571425 mul rmoveto } if  % not 0.5, so that
						% it looks nicer
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% Draw the text
	stringtxt overbarshow
    } {
	% More than one line, compute bounding box for the text

	% vertical height, don't use the actual hieght of the characters
	% assume that the user wants to make the baselines line up with two
	% text boxes placed side by side
	/stringh stringcount spacing mul neg def
	% Now figure out horizontal size, this amounts to keeping track
	% of the longest string
	/stringw 0.0 def
	strings {
	    mystringwidth pop
	    dup stringw gt {
		/stringw exch def
	    } {
		pop
	    } ifelse
	} forall
	/stringw stringw neg def 	% get the -width
	
	% First do vertical calculations
	% hcenter rjustify vcenter vjustify 
	% vertical justification
	{ 0 stringh fontsize add rmoveto } if 
	% vertical center
	{ 0 stringh 0.5 mul rmoveto } if 
	% Then do horizontal calculations
	% right justify
	{ stringw 0 rmoveto } if
	% center
	{ stringw 2.0 div 0 rmoveto } if
	% now move up to the first line and begin rendering
	0 stringcount 1 sub spacing mul rmoveto
	strings {
	    gsave		% Save starting point
	    overbarshow		% render the text
	    grestore
	    0 spacing neg rmoveto
	} forall
    } ifelse
    grestore 	% Restore old state
} bind def


%%EndProlog
%%Page: 1 1
/gEDAFont ISOLatin1Extended /Helvetica RE
2 setlinecap
0.072000 0.072000 scale
8113 500 translate 90 rotate
0.454545 0.454545 scale
-40000 -40000 translate
gsave
40000 40000 62000 40000 10 line
62000 40000 62000 57000 10 line
62000 57000 40000 57000 10 line
40000 57000 40000 40000 10 line
57900 40600 57900 40000 10 line
gsave
false false false false 161.777776 [(FILE:) ] 0 54500 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(REVISION:) ] 0 58000 40400 144.444443 text
grestore
gsave
false false false false 161.777776 [(DRAWN BY: ) ] 0 58000 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(PAGE) ] 0 54500 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(OF) ] 0 56200 40100 144.444443 text
grestore
gsave
false false false false 161.777776 [(TITLE) ] 0 54500 40700 144.444443 text
grestore
54400 40000 62000 40000 10 line
62000 40000 62000 41400 10 line
62000 41400 54400 41400 10 line
54400 41400 54400 40000 10 line
54400 40600 62000 40600 10 line
grestore
53700 51100 55300 51100 10 line
55300 51100 55300 54200 10 line
53700 50200 55000 50200 10 line
55000 48800 55000 52900 10 line
53700 50800 55600 50800 10 line
55600 50200 55600 53500 10 line
55600 50500 53700 50500 10 line
gsave
55600 50000 55600 50200 10 line
55500 50000 55700 50000 10 line
55555 49950 55645 49950 10 line
55580 49910 55620 49910 10 line
grestore
gsave
55000 48800 55000 48600 10 line
55150 48600 54850 48600 10 line
grestore
gsave
true false false true 202.222224 [(-15V) ] 0 55000 48500 180.555557 text
grestore
gsave
55300 54200 55300 54400 10 line
55150 54400 55450 54400 10 line
grestore
gsave
true false false false 202.222224 [(+15V) ] 0 55300 54500 180.555557 text
grestore
gsave
53400 50800 53700 50800 10 line
gsave
false false false false 161.777776 [(2) ] 0 52250 50750 144.444443 text
grestore
53400 50200 53700 50200 10 line
gsave
false false false false 161.777776 [(4) ] 0 52250 50150 144.444443 text
grestore
53400 51100 53700 51100 10 line
gsave
false false false false 161.777776 [(1) ] 0 52250 51050 144.444443 text
grestore
53400 50500 53700 50500 10 line
gsave
false false false false 161.777776 [(3) ] 0 52250 50450 144.444443 text
grestore
53400 49900 53700 49900 10 line
gsave
false false false false 161.777776 [(5) ] 0 52250 49850 144.444443 text
grestore
53400 51100 52500 51100 10 line
53400 50800 52500 50800 10 line
53400 50500 52500 50500 10 line
53400 50200 52500 50200 10 line
53400 49900 52500 49900 10 line
52000 49700 52500 49700 10 line
52500 49700 52500 51300 10 line
52500 51300 52000 51300 10 line
52000 51300 52000 49700 10 line
grestore
gsave
false false false false 202.222224 [(CONN4) ] 0 52000 52000 180.555557 text
grestore
gsave
false false false false 202.222224 [(Wired to MiniHEX9 \(Male\)) ] 0 52000 51600 180.555557 text
grestore
gsave
false false false false 202.222224 [(molex-22-05-3051-mini_5_ra.fp) ] 0 52000 51400 180.555557 text
grestore
gsave
false false false false 202.222224 [(126-220) ] 0 52000 51800 180.555557 text
grestore
54000 49100 54700 49100 10 line
54700 49100 54700 52600 10 line
54700 49900 53700 49900 10 line
gsave
53400 53500 53700 53500 10 line
gsave
false false false false 161.777776 [(2) ] 0 52250 53450 144.444443 text
grestore
53400 52900 53700 52900 10 line
gsave
false false false false 161.777776 [(4) ] 0 52250 52850 144.444443 text
grestore
53400 53800 53700 53800 10 line
gsave
false false false false 161.777776 [(1) ] 0 52250 53750 144.444443 text
grestore
53400 53200 53700 53200 10 line
gsave
false false false false 161.777776 [(3) ] 0 52250 53150 144.444443 text
grestore
53400 52600 53700 52600 10 line
gsave
false false false false 161.777776 [(5) ] 0 52250 52550 144.444443 text
grestore
53400 53800 52500 53800 10 line
53400 53500 52500 53500 10 line
53400 53200 52500 53200 10 line
53400 52900 52500 52900 10 line
53400 52600 52500 52600 10 line
52000 52400 52500 52400 10 line
52500 52400 52500 54000 10 line
52500 54000 52000 54000 10 line
52000 54000 52000 52400 10 line
grestore
gsave
false false false false 202.222224 [(CONN3) ] 0 52000 54700 180.555557 text
grestore
gsave
false false false false 202.222224 [(Wired to MiniHEX9 \(Female\)) ] 0 52000 54300 180.555557 text
grestore
gsave
false false false false 202.222224 [(molex-22-23-2051-mini_5_vert.fp) ] 0 52000 54100 180.555557 text
grestore
gsave
false false false false 202.222224 [(126-221) ] 0 52000 54500 180.555557 text
grestore
53700 53800 55300 53800 10 line
54700 52600 53700 52600 10 line
53700 52900 55000 52900 10 line
53700 53200 55600 53200 10 line
53700 53500 55600 53500 10 line
gsave
50500 49000 50500 49200 10 line
50500 49900 50500 49700 10 line
50300 49400 50700 49400 10 line
50300 49500 50700 49500 10 line
50500 49700 50500 49500 10 line
50500 49400 50500 49200 10 line
grestore
gsave
false true false false 202.222224 [(C5) ] 0 50200 49800 180.555557 text
grestore
gsave
false true false false 202.222224 [(0.1uF) ] 0 50200 49600 180.555557 text
grestore
gsave
false true false false 202.222224 [(rcy\(100,none\)) ] 0 50200 49000 180.555557 text
grestore
gsave
false true false false 202.222224 [(ceramic) ] 0 50200 49200 180.555557 text
grestore
gsave
false true false false 202.222224 [(C315C104M5U5TA) ] 0 50200 49400 180.555557 text
grestore
gsave
48000 49000 48000 48800 10 line
gsave
false true false false 161.777776 [(1) ] 270 48050 48850 144.444443 text
grestore
48000 48100 48000 48300 10 line
gsave
false false false false 161.777776 [(2) ] 270 48050 48250 144.444443 text
grestore
48200 48600 47800 48600 10 line
48000 48300 48000 48500 10 line
48000 48600 48000 48800 10 line
48000 47800 700 75 105 10 darc
48200 48711 48100 48711 10 line
48149 48660 48149 48760 10 line
grestore
gsave
false true false false 202.222224 [(C4) ] 0 47700 48900 180.555557 text
grestore
gsave
false true false false 202.222224 [(100uF) ] 0 47700 48700 180.555557 text
grestore
gsave
false true false false 202.222224 [(rcy\(100, bar-sign\)) ] 0 47700 48100 180.555557 text
grestore
gsave
false true false false 202.222224 [(P5138-ND) ] 0 47700 48300 180.555557 text
grestore
gsave
false true false false 202.222224 [(Electrolytic) ] 0 47700 48500 180.555557 text
grestore
gsave
44000 49000 44000 48800 10 line
gsave
false true false false 161.777776 [(1) ] 270 44050 48850 144.444443 text
grestore
44000 48100 44000 48300 10 line
gsave
false false false false 161.777776 [(2) ] 270 44050 48250 144.444443 text
grestore
44200 48600 43800 48600 10 line
44000 48300 44000 48500 10 line
44000 48600 44000 48800 10 line
44000 47800 700 75 105 10 darc
44200 48711 44100 48711 10 line
44149 48660 44149 48760 10 line
grestore
gsave
false true false false 202.222224 [(C3) ] 0 43700 48900 180.555557 text
grestore
gsave
false true false false 202.222224 [(100uF) ] 0 43700 48700 180.555557 text
grestore
gsave
false true false false 202.222224 [(rcy\(100, bar-sign\)) ] 0 43700 48100 180.555557 text
grestore
gsave
false true false false 202.222224 [(P5138-ND) ] 0 43700 48300 180.555557 text
grestore
gsave
false true false false 202.222224 [(Electrolytic) ] 0 43700 48500 180.555557 text
grestore
44000 49000 44000 51300 10 line
gsave
48000 47000 48000 47200 10 line
47900 47000 48100 47000 10 line
47955 46950 48045 46950 10 line
47980 46910 48020 46910 10 line
grestore
44000 48100 44000 47500 10 line
44000 47500 50500 47500 10 line
48000 48100 48000 47500 10 line
48000 47500 48000 47200 10 line
50500 49000 50500 47500 10 line
gsave
50500 52800 50500 53000 10 line
50350 53000 50650 53000 10 line
grestore
gsave
true false false false 202.222224 [(+15V) ] 0 50500 53100 180.555557 text
grestore
gsave
54000 49100 53800 49100 10 line
53300 49200 53200 49100 10 line
53200 49100 53300 49000 10 line
53800 49100 53700 49000 10 line
53700 49200 53800 49100 10 line
53700 49200 53300 49200 10 line
53700 49000 53300 49000 10 line
grestore
gsave
false true false true 202.222224 [(JUMPER1) ] 0 53100 49000 180.555557 text
grestore
gsave
false true true false 202.222224 [(Chassis) ] 0 53100 49100 180.555557 text
grestore
45900 49700 45900 47500 10 line
44900 50500 44000 50500 10 line
gsave
44000 51300 44000 51500 10 line
43850 51500 44150 51500 10 line
grestore
gsave
true false false false 202.222224 [(+5V) ] 0 44000 51600 180.555557 text
grestore
gsave
44900 50500 45200 50500 10 line
gsave
false false false false 202.222224 [(OUT) ] 0 45255 50495 180.555557 text
grestore
gsave
false true false false 202.222224 [(1) ] 0 45105 50545 180.555557 text
grestore
45900 49700 45900 50000 10 line
gsave
false false false true 202.222224 [(GND) ] 90 45900 50055 180.555557 text
grestore
gsave
false true false true 202.222224 [(2) ] 90 45950 49905 180.555557 text
grestore
47000 50500 46700 50500 10 line
gsave
false true false false 202.222224 [(IN) ] 0 46645 50495 180.555557 text
grestore
gsave
false false false false 202.222224 [(3) ] 0 46795 50545 180.555557 text
grestore
46700 50300 46700 50800 10 line
46700 50800 45200 50800 10 line
45200 50800 45200 50300 10 line
45500 50000 46400 50000 10 line
46400 50300 300 -90 0 10 darc
45500 50300 300 180 270 10 darc
grestore
gsave
false false false false 202.222224 [(VREG1) ] 0 45195 51095 180.555557 text
grestore
gsave
false false false false 202.222224 [(LM78L05) ] 0 45195 50895 180.555557 text
grestore
gsave
false true false false 202.222224 [(TO92) ] 0 46705 50895 180.555557 text
grestore
gsave
47900 53600 48200 53600 10 line
gsave
false false false false 161.777776 [(2) ] 0 46850 53550 144.444443 text
grestore
47900 53900 48200 53900 10 line
gsave
false false false false 161.777776 [(1) ] 0 46850 53850 144.444443 text
grestore
47900 53900 47000 53900 10 line
47900 53600 47000 53600 10 line
46500 53400 47000 53400 10 line
47000 53400 47000 54100 10 line
47000 54100 46500 54100 10 line
46500 54100 46500 53400 10 line
grestore
gsave
false false false false 202.222224 [(CONN5) ] 0 46500 54400 180.555557 text
grestore
gsave
false false false false 202.222224 [(molex-22-05-3021-mini_2_ra.fp) ] 0 46500 54200 180.555557 text
grestore
gsave
49500 54300 49500 54500 10 line
49350 54500 49650 54500 10 line
grestore
gsave
true false false false 202.222224 [(+5V) ] 0 49500 54600 180.555557 text
grestore
48200 53900 49500 53900 10 line
49500 53900 49500 54300 10 line
gsave
49500 53000 49500 53200 10 line
49400 53000 49600 53000 10 line
49455 52950 49545 52950 10 line
49480 52910 49520 52910 10 line
grestore
48200 53600 49500 53600 10 line
49500 53600 49500 53200 10 line
gsave
50400 51900 50600 51800 10 line
50600 51800 50400 51700 10 line
50400 51700 50600 51600 10 line
50600 51600 50400 51500 10 line
50400 51900 50600 52000 10 line
50600 52000 50500 52050 10 line
50500 52200 50500 52050 10 line
50500 51300 50500 51452 10 line
50400 51501 50500 51450 10 line
grestore
gsave
false true false false 202.222224 [(R3) ] 0 50300 51900 180.555557 text
grestore
gsave
false true false false 202.222224 [(50) ] 0 50300 51700 180.555557 text
grestore
gsave
false true false false 202.222224 [(acy\(400, zigzag\)) ] 0 50300 51500 180.555557 text
grestore
50500 52200 50500 52800 10 line
47000 50500 50500 50500 10 line
50500 49900 50500 51300 10 line
48000 49000 48000 50500 10 line
newpath
55300 53800
25
0 360 arc
fill
newpath
55000 50200
25
0 360 arc
fill
newpath
55000 50200
25
0 360 arc
fill
newpath
55000 50200
25
0 360 arc
fill
newpath
55600 50800
25
0 360 arc
fill
newpath
55600 50800
25
0 360 arc
fill
newpath
55600 50800
25
0 360 arc
fill
newpath
55600 50500
25
0 360 arc
fill
newpath
55600 53200
25
0 360 arc
fill
newpath
55600 50500
25
0 360 arc
fill
newpath
55600 50500
25
0 360 arc
fill
newpath
54700 49900
25
0 360 arc
fill
newpath
54700 49900
25
0 360 arc
fill
newpath
54700 49900
25
0 360 arc
fill
newpath
55300 53800
25
0 360 arc
fill
newpath
55300 53800
25
0 360 arc
fill
newpath
55600 53200
25
0 360 arc
fill
newpath
55600 53200
25
0 360 arc
fill
newpath
44000 50500
25
0 360 arc
fill
newpath
48000 47500
25
0 360 arc
fill
newpath
48000 47500
25
0 360 arc
fill
newpath
45900 47500
25
0 360 arc
fill
newpath
48000 47500
25
0 360 arc
fill
newpath
48000 47500
25
0 360 arc
fill
newpath
48000 47500
25
0 360 arc
fill
newpath
48000 47500
25
0 360 arc
fill
newpath
45900 47500
25
0 360 arc
fill
newpath
45900 47500
25
0 360 arc
fill
newpath
44000 50500
25
0 360 arc
fill
newpath
44000 50500
25
0 360 arc
fill
newpath
50500 50500
25
0 360 arc
fill
newpath
50500 50500
25
0 360 arc
fill
newpath
48000 50500
25
0 360 arc
fill
newpath
50500 50500
25
0 360 arc
fill
newpath
48000 50500
25
0 360 arc
fill
newpath
48000 50500
25
0 360 arc
fill
showpage
%%End
